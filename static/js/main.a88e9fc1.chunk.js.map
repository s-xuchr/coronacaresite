{"version":3,"sources":["components/NavigationBar.js","Home.js","About.js","NoMatch.js","components/NavItem.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","NavigationBar","Navbar","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","Item","Home","props","style","fontFamily","backgroundColor","element","color","fontSize","About","NoMatch","NavIcon","StyledNavItem","active","NavItem","handleClick","path","onItemClick","this","css","onClick","React","Component","StyledSideNav","SideNav","setState","activePath","state","location","pathname","items","name","key","map","item","RouterSideNav","withRouter","Sidebar","App","Fragment","basename","process","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a88e9fc1.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nconst Styles = styled.div`\n  .navbar { background-color: #222; }\n  a, .navbar-nav, .navbar-light .nav-link {\n    color: #9FFFCB;\n    &:hover { color: white; }\n  }\n  .navbar-brand {\n    font-size: 1.4em;\n    color: #9FFFCB;\n    &:hover { color: white; }\n  }\n  .form-center {\n    position: absolute !important;\n    left: 25%;\n    right: 25%;\n  }\n`;\nexport const NavigationBar = () => (\n  <Styles>\n    <Navbar expand=\"lg\">\n      <Navbar.Brand as={Link} to=\"/\">coronacare.ai</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n      {/* Search Bar */}\n      {/* <Form className=\"form-center\">\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"\" />\n      </Form> */}\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <Nav.Item><Nav.Link as={Link} to=\"/\">Home</Nav.Link></Nav.Item> \n          <Nav.Item><Nav.Link as={Link} to=\"/about\">About the Product</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link as={Link} to=\"/contact\">Contact Us</Nav.Link></Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  </Styles>\n)","import React from 'react';\nimport styled from 'styled-components';\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`;\nexport const Home = (props) => (\n    <div className=\"padding\">\n        <h1 style={{fontFamily: 'Verdana', backgroundColor: 'lightgray'}}>Welcome</h1>\n        <p style={{fontFamily: 'Verdana'}}>Feel free to use our chatbot at (paste link here)</p>\n    </div>\n    \n)","import React from 'react';\nimport styled from 'styled-components';\nimport './components/Pages.css';\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`; \nconst element = <w style={{ color: 'green', fontSize: '110%', fontFamily: 'Verdana' }}>coronacare.ai</w>\nexport const About = () => (\n    <div className=\"padding\">\n        <h1 style={{fontFamily: 'Verdana', backgroundColor: 'lightgray'}}>About</h1>\n        <p style={{fontFamily: 'Verdana'}}> {element} is a Facebook Messenger chatbot tailored specifically for those in need of assistance during the COVID-19 pandemic. </p> \n        <p style={{fontFamily: 'Verdana'}}> Ask it questions about COVID-19 to get the latest news and data about the pandemic or simply prompt it for ways to spend your time while in quarantine. </p>\n        <p style={{fontFamily: 'Verdana'}}> Using the bot, you can: </p>\n        <ul style={{fontFamily: 'Verdana'}}>\n          <li> Ask questions about COVID-19 </li>\n          <li> Find local therapists and other resources to suit your needs </li>\n          <li> Request to join a support group </li>\n        </ul>\n        <p style={{fontFamily: 'Verdana'}}> To get started, message \"Hello\" to Coronacare.ai on Facebook Messenger! </p>\n    </div>\n)","import React from 'react';\nimport styled from 'styled-components';\n// const Wrapper = styled.div`\n//   margin-top: 1em;\n//   margin-left: 6em;\n//   margin-right: 6em;\n// `;\nexport const NoMatch = () => (\n  <div className=\"padding\">\n    <h1 style={{fontFamily: 'Verdana', backgroundColor: 'lightgray'}}>Contact Us</h1>\n  </div>\n)","import React from 'react';\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst NavIcon = styled.div`\n`;\nconst StyledNavItem = styled.div`\n  height: 70px;\n  width: 75px; /* width must be same size as NavBar to center */\n  text-align: center; /* Aligns <a> inside of NavIcon div */\n  margin-bottom: 0;   /* Puts space between NavItems */\n  a {\n    font-size: 2.7em;\n    color: ${(props) => props.active ? \"white\" : \"#9FFFCB\"};\n    :hover {\n      opacity: 0.7;\n      text-decoration: none; /* Gets rid of underlining of icons */\n    }  \n  }\n`;\n\n\n\nclass NavItem extends React.Component {\n    handleClick = () => {\n        const { path, onItemClick } = this.props;\n        onItemClick(path);\n    }\n    render() {\n      const { active } = this.props;\n      return (\n        <StyledNavItem active={active}>\n            <Link to={this.props.path} className={this.props.css} onClick={this.handleClick}>\n                <NavIcon></NavIcon>\n            </Link>\n        </StyledNavItem>\n      );\n    }\n  }\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem.js';\nimport styled from \"styled-components\";\nimport { HashRouter as Router, Route, Link, withRouter } from \"react-router-dom\";\n/* This defines the actual bar going down the screen */\nconst StyledSideNav = styled.div`\n  position: fixed;     /* Fixed Sidebar (stay in place on scroll and position relative to viewport) */\n  height: 100%;\n  width: 75px;     /* Set the width of the sidebar */\n  z-index: 1;      /* Stay on top of everything */\n  top: 3.4em;      /* Stay at the top */\n  background-color: #222; /* Black */\n  overflow-x: hidden;     /* Disable horizontal scroll */\n  padding-top: 10px;\n`;\n\nclass SideNav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          activePath: props.location.pathname,\n          items: [\n            {\n              path: '/', /* path is used as id to check which NavItem is active basically */\n              name: 'Home',\n              css: 'fa fa-fw fa-home',\n              key: 1 /* Key is required, else console throws error. Does this please you Mr. Browser?! */\n            },\n            {\n              path: '/about',\n              name: 'About the Product',\n              css: 'fa fa-fw fa-cog',\n              key: 2\n            },\n            {\n              path: '/contact',\n              name: 'Contact Us',\n              css: 'fas fa-address-book',\n              key: 3\n            },\n          ]\n        }  \n    }\n    onItemClick = (path) => {\n        this.setState({ activePath: path }); /* Sets activePath which causes rerender which causes CSS to change */\n    }\n    render() {\n        const { items, activePath } = this.state;\n        return (\n            <StyledSideNav>\n                { \n                    /* items = just array AND map() loops thru that array AND item is param of that loop */\n                    items.map((item) => {\n                    /* Return however many NavItems in array to be rendered */\n                        return (\n                            <NavItem path={item.path} name={item.name} css={item.css} onItemClick={this.onItemClick} /* Simply passed an entire function to onClick prop */ active={item.path === activePath} key={item.key}/>\n                        )\n                    })\n                }\n            </StyledSideNav>\n        );\n    }\n}\n\nconst RouterSideNav = withRouter(SideNav);\n\nexport default class Sidebar extends React.Component {\n  render() {\n    return (\n        <RouterSideNav></RouterSideNav>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from './components/NavigationBar';\nimport { Home } from './Home';\nimport { About } from './About';\nimport { NoMatch } from './NoMatch';\nimport Sidebar from './components/Sidebar';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router basename={process.env.PUBLIC_URL}>\n        <NavigationBar />\n        <Sidebar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={NoMatch} />\n          </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}